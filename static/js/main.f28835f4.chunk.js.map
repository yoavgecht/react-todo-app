{"version":3,"sources":["components/Header.js","components/Todo.js","actions/todoActions.js","components/AddNewTodo.js","components/TodoList.js","components/NewTodo.js","components/EditTodo.js","App.js","serviceWorker.js","reducers/todosReducer.js","reducers/rootReducer.js","index.js","configureStore.js","localStorage.js"],"names":["Header","react_default","a","createElement","className","connect","dispatch","deleteTodo","id","type","_ref","todo","handleDelete","handleEdit","title","content","onClick","e","Link","to","pathname","concat","state","AddNewTodo","todos","allTodos","map","components_Todo","key","components_AddNewTodo","NewTodo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","inputValue","target","value","name","errors","assign","setState","prevState","objectSpread","defineProperty","handleSubmit","preventDefault","checkValidation","addTodo","history","push","v4","nextProps","onSubmit","htmlFor","onChange","role","Component","EditTodo","_props$history$locati","location","editTodo","editedTodo","App","bind","assertThisInitialized","isValid","length","forEach","singleTodo","_this2","components_Header","BrowserRouter","basename","process","Switch","Route","exact","path","render","components_TodoList","components_NewTodo","components_EditTodo","Boolean","window","hostname","match","todosReducer","arguments","undefined","action","filter","toConsumableArray","newTodos","index","findIndex","rootReducer","combineReducers","store","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","createStore","subscribe","stringify","setItem","console","log","saveState","getState","configureStore","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f28835f4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <div className=\"page-header\">\n            <h1 className=\"text-center\">Todo App</h1>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { deleteTodo } from '../actions/todoActions';\n\nconst Todo = ({ todo, handleDelete, handleEdit, deleteTodo }) => {\n    handleDelete = (id) => {\n        deleteTodo(id);\n    }\n    return (\n        <div className=\"list-group-item text-center\">\n            <h5>{todo.title}</h5>\n            <p>{todo.content}</p>\n            <span className=\"fa fa-trash\" onClick={(e) => handleDelete(todo.id)}></span>\n            <Link to={{pathname:`/editTodo/${todo.id}`, state: {title: todo.title, content:todo.content, id:todo.id}}}><span className=\"fa fa-edit\"></span></Link>\n        </div>\n    );\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deleteTodo: (id) => { dispatch(deleteTodo(id))}\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Todo);","export const deleteTodo = (id) => {\n    return {\n        type: 'DELETE_TODO',\n        id\n    }\n}\n\nexport const addTodo = (todo) => {\n    return {\n        type: 'ADD_TODO',\n        todo\n    }    \n}\n\nexport const editTodo = (todo) => {\n    return {\n        type: 'EDIT_TODO',\n        editedTodo: todo \n    }    \n}","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nconst AddNewTodo = () => {\n    return (\n       <Link to='/newTodo'><button className=\"btn btn-primary\">Add New Todo</button></Link>\n    );\n}\n\nexport default AddNewTodo;","import React from 'react';\nimport Todo from './Todo';\nimport AddNewTodo from './AddNewTodo';\nimport { connect } from 'react-redux';\n\nconst TodoList = ({todos}) => {\n    const allTodos = todos ? (todos.map((todo) => {\n        return <Todo key={todo.id} todo={todo} />\n    })) : (<div>No todos yet...</div>)\n    return (\n        <div className=\"form-group\">\n            {allTodos}\n            <AddNewTodo />\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todos\n  }\n}\n\nexport default connect(mapStateToProps)(TodoList);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions/todoActions';\nimport { v4 } from 'node-uuid';\n\nclass NewTodo extends Component {\n     constructor(props) {\n        super(props);\n        this.state = {\n            todo: {\n                title: '', \n                content: '', \n                id: v4()\n            },\n            errors: {}\n        }\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({errors: nextProps.errors})\n    }\n\n    handleInputChange = (e) => {\n        let inputValue = e.target.value;\n        let key = [e.target.name];\n        if(this.state.errors[e.target.name]) {\n            var errors = Object.assign({}, this.state.errors);\n            delete errors[e.target.name];\n            this.setState(prevState => ({\n                todo:{\n                    ...prevState.todo,\n                    [key] : inputValue,\n                },\n                errors\n            }))\n\n        } else {\n            this.setState(prevState => ({\n                todo:{\n                    ...prevState.todo,\n                    [key] : inputValue,\n                }\n            }))\n        }\n        \n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.props.checkValidation(this.state.todo)){\n            this.setState({todo:{title: '', content: ''}});\n            this.props.addTodo(this.state.todo);\n            this.props.history.push('/');\n        }\n    }\n\n    render() {\n        return (\n        <div className=\"row\">\n            <div className=\"col-md-6\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"title\">Todo Title:</label>\n                        <input type=\"text\" id=\"title\" name=\"title\" className=\"form-control\" value={this.state.todo.title} onChange={this.handleInputChange}/>\n                         {this.state.errors.title && <div className=\"alert alert-danger\" role=\"alert\">\n                           {this.state.errors.title}\n                        </div>}\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"content\">Todo content:</label>\n                         <textarea className=\"form-control\" id=\"content\" name=\"content\" value={this.state.todo.content} onChange={this.handleInputChange}></textarea>\n                         {this.state.errors.content && <div className=\"alert alert-danger\" role=\"alert\">{this.state.errors.content}\n                    </div>}\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </form>\n            </div>\n        </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addTodo: (todo) => {dispatch(addTodo(todo))}\n  }\n}\n\n\nexport default connect(null, mapDispatchToProps)(NewTodo);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { editTodo } from '../actions/todoActions';\n\nclass EditTodo extends Component {\n     constructor(props) {\n        const {title, content, id} = props.history.location.state\n        super(props);\n         this.state = {\n            todo: {\n                title, \n                content,\n                id\n            },\n            errors: {}\n        }\n    }\n  \n   componentWillReceiveProps(nextProps){\n        this.setState({errors: nextProps.errors})\n    }\n\n    handleInputChange = (e) => {\n        let inputValue = e.target.value;\n        let key = [e.target.name];\n        if(this.state.errors[e.target.name]) {\n            var errors = Object.assign({}, this.state.errors);\n            delete errors[e.target.name];\n            this.setState(prevState => ({\n                todo:{\n                    ...prevState.todo,\n                    [key] : inputValue\n                },\n                errors\n            }))\n\n        } else {\n            this.setState(prevState => ({\n                todo:{\n                    ...prevState.todo,\n                    [key] : inputValue,\n                }\n            }))\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.props.checkValidation(this.state.todo)){\n            this.props.editTodo(this.state.todo);\n            this.setState({todo:{title: '', content: ''}});\n            this.props.history.push('/');\n        }\n    }\n\n    render() {\n        return (\n        <div className=\"row\">\n            <div className=\"col-md-6\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"title\">Todo Title:</label>\n                        <input type=\"text\" id=\"title\" name=\"title\" className=\"form-control\" value={this.state.todo.title} onChange={this.handleInputChange}/>\n                         {this.state.errors.title && <div className=\"alert alert-danger\" role=\"alert\">\n                           {this.state.errors.title}\n                        </div>}\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"content\">Todo content:</label>\n                        <textarea className=\"form-control\" id=\"content\" name=\"content\" value={this.state.todo.content} onChange={this.handleInputChange}></textarea>\n                         {this.state.errors.content && <div className=\"alert alert-danger\" role=\"alert\">{this.state.errors.content}\n                    </div>}\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </form>\n            </div>\n        </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    editTodo: (todo) => {dispatch(editTodo(todo))}\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(EditTodo);","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport TodoList from './components/TodoList';\nimport NewTodo from './components/NewTodo';\nimport EditTodo from './components/EditTodo';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n  constructor(props){\n    super(props) \n    this.checkValidation = this.checkValidation.bind(this);\n    this.state={errors: {}};\n  }\n\n      checkValidation(todo) {\n         let errors = {};\n         let isValid = true;\n         if(this.props.todos.length > 0){\n            this.props.todos.forEach((singleTodo) => {\n              if(todo.title === singleTodo.title && todo.content === singleTodo.content){\n                    errors.title = \"Todo already exists...\";\n                    isValid = false;\n              }\n            })\n         }\n\n         if (typeof todo.title === 'string' && todo.title === '') {\n            errors.title = \"Title can't be empty\";\n            isValid = false\n         }\n\n         if(typeof todo.title === 'string' && todo.title.length < 2 && todo.title !== '') {\n             errors.title = \"Title must be more then 1 char\";\n             isValid = false\n         }\n\n         if (typeof todo.content === 'string' && todo.content === '') {\n              errors.content = \"Content can't be empty\";\n              isValid = false\n         }\n\n         if(typeof todo.content === 'string' && todo.content.length < 2 && todo.content !== '') {\n             errors.content = \"Content must be more then 1 char\";\n             isValid = false\n         }\n\n         this.setState({errors});\n         return isValid;\n    }\n\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Switch>\n              <Route exact path='/' render={(props) => <TodoList {...props}  />} /> \n              <Route path='/newTodo' render={(props) => <NewTodo {...props} checkValidation={this.checkValidation} errors={this.state.errors}/> } />\n              <Route path='/editTodo/:id' render={(props) => <EditTodo {...props} checkValidation={this.checkValidation} errors={this.state.errors}/>} />\n          </Switch>\n         </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const todosReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'DELETE_TODO':\n        const todos = state.filter((todo) => {\n            return todo.id !== action.id\n        });\n        return todos;\n        \n        case 'ADD_TODO':\n            return [\n                ...state,\n                action.todo\n            ];\n\n        case 'EDIT_TODO':\n            const newTodos = [...state];\n            const index = newTodos.findIndex((todo) => {\n                return action.editedTodo.id === todo.id\n            })\n            newTodos[index].title = action.editedTodo.title;\n            newTodos[index].content = action.editedTodo.content;\n            return newTodos;\n        default:\n            return state;\n    } \n}\n\nexport default todosReducer;","import { combineReducers } from 'redux';\nimport todosReducer from './todosReducer'\n\nconst rootReducer = combineReducers({\n   todos: todosReducer\n})\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport configureStore from './configureStore';\n\nconst store = configureStore();\n\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from 'redux';\nimport rootReducer from './reducers/rootReducer';\nimport { loadState, saveState } from './localStorage';\n\nconst configureStore = () => {\n    const persistedState = loadState(); \n    const store = createStore(rootReducer, persistedState);\n\n    store.subscribe(() => {\n        saveState({todos: store.getState().todos})\n    });\n    return store;\n}\n\nexport default configureStore;","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    console.log(err);\n  }\n};"],"sourceRoot":""}